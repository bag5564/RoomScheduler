
import java.sql.Date;
import java.util.ArrayList;
import java.text.SimpleDateFormat;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        rebuildFacultyComboBoxes();
        rebuildDateComboBoxes();
        rebuildRoomComboBoxes();
    }

    public void rebuildFacultyComboBoxes() {
        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
        statusFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
        cancelReservationFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
    }

    public void rebuildDateComboBoxes() {
        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
        statusReservationsDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
        cancelReservationDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
    }
    public void rebuildRoomComboBoxes(){
        dropRoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(RoomQueries.getAllRooms().toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFacultyTextField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addFacultyStatusLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        addDateButton = new javax.swing.JButton();
        addDateStatusLabel = new javax.swing.JLabel();
        addDateSpinner = new javax.swing.JSpinner();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        addRoomNameTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        addRoomSeatsTextField = new javax.swing.JTextField();
        addRoomButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        addRoomStatusTextArea = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        dropRoomComboBox = new javax.swing.JComboBox<>();
        dropRoomButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        dropRoomStatusTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        reserveButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        reserveFacultyComboBox = new javax.swing.JComboBox<>();
        reserveDateComboBox = new javax.swing.JComboBox<>();
        reserveSeatsTextField = new javax.swing.JTextField();
        reserveStatusLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        cancelReservationFacultyComboBox = new javax.swing.JComboBox<>();
        cancelReservationDateComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cancelReservationButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        cancelReservationStatusTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        statusReservationsButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        statusReservationsDateComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusReservationsStatusTextArea = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        statusWaitlistButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusWaitlistStatusTextArea = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        statusFacultyComboBox = new javax.swing.JComboBox<>();
        statusFacultyButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusFacultyStatusTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Room Scheduler");

        jLabel2.setText("Faculty Name:");

        addFacultyTextField.setColumns(20);
        addFacultyTextField.setText(" ");

        addFacultyButton.setText("Submit");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addFacultyStatusLabel.setText("    ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addFacultyStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addFacultyButton)
                            .addComponent(addFacultyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addFacultyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addFacultyButton)
                .addGap(18, 18, 18)
                .addComponent(addFacultyStatusLabel)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Faculty", jPanel1);

        jLabel9.setText("Date:");

        addDateButton.setText("Submit");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        addDateStatusLabel.setText("     ");

        addDateSpinner.setModel(new javax.swing.SpinnerDateModel());

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDateStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addDateButton)
                            .addComponent(addDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(addDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(addDateButton)
                .addGap(47, 47, 47)
                .addComponent(addDateStatusLabel)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Date", jPanel6);

        jLabel7.setText("Room:");

        jLabel8.setText("Seats:");

        addRoomButton.setText("Submit");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        addRoomStatusTextArea.setColumns(20);
        addRoomStatusTextArea.setRows(5);
        jScrollPane4.setViewportView(addRoomStatusTextArea);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addGap(18, 18, 18)
                                    .addComponent(addRoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(18, 18, 18)
                                    .addComponent(addRoomSeatsTextField)))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(addRoomButton)))
                .addContainerGap(290, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(addRoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(addRoomSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(addRoomButton)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add Room", jPanel5);

        jLabel13.setText("Room:");

        dropRoomComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dropRoomButton.setText("Submit");
        dropRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomButtonActionPerformed(evt);
            }
        });

        dropRoomStatusTextArea.setColumns(20);
        dropRoomStatusTextArea.setRows(5);
        jScrollPane5.setViewportView(dropRoomStatusTextArea);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(38, 38, 38)
                                .addComponent(dropRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(dropRoomButton)))
                .addContainerGap(282, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(dropRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(dropRoomButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        jTabbedPane1.addTab("Drop Room", jPanel9);

        reserveButton.setText("Submit");
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Faculty Name:");

        jLabel4.setText("Date:");

        jLabel5.setText("# of Seats:");

        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        reserveSeatsTextField.setColumns(10);

        reserveStatusLabel.setText("   ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(reserveButton))
                    .addComponent(reserveStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reserveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reserveStatusLabel)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reserve", jPanel2);

        cancelReservationFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cancelReservationDateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel10.setText("Faculty:");

        jLabel11.setText("Date:");

        cancelReservationButton.setText("Submit");
        cancelReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReservationButtonActionPerformed(evt);
            }
        });

        cancelReservationStatusTextArea.setColumns(20);
        cancelReservationStatusTextArea.setRows(5);
        jScrollPane6.setViewportView(cancelReservationStatusTextArea);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(cancelReservationButton))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cancelReservationFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cancelReservationDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(297, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cancelReservationFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(cancelReservationDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelReservationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addGap(32, 32, 32))
        );

        jTabbedPane1.addTab("Cancel Reservation", jPanel7);

        statusReservationsButton.setText("Show Reservations");
        statusReservationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusReservationsButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Date:");

        statusReservationsDateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        statusReservationsStatusTextArea.setColumns(20);
        statusReservationsStatusTextArea.setRows(5);
        jScrollPane1.setViewportView(statusReservationsStatusTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusReservationsButton)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(statusReservationsDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(510, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(statusReservationsDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(statusReservationsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Status Reservations By Date", jPanel3);

        statusWaitlistButton.setText("Show Waitlist");
        statusWaitlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusWaitlistButtonActionPerformed(evt);
            }
        });

        statusWaitlistStatusTextArea.setColumns(20);
        statusWaitlistStatusTextArea.setRows(5);
        jScrollPane2.setViewportView(statusWaitlistStatusTextArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(348, 348, 348)
                        .addComponent(statusWaitlistButton)))
                .addContainerGap(238, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusWaitlistButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Status Waitlist", jPanel4);

        jLabel12.setText("Faculty:");

        statusFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        statusFacultyButton.setText("Submit");
        statusFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusFacultyButtonActionPerformed(evt);
            }
        });

        statusFacultyStatusTextArea.setColumns(20);
        statusFacultyStatusTextArea.setRows(5);
        jScrollPane3.setViewportView(statusFacultyStatusTextArea);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(statusFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(statusFacultyButton)))
                .addContainerGap(353, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(statusFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(statusFacultyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addGap(46, 46, 46))
        );

        jTabbedPane1.addTab("Status Faculty", jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(327, 327, 327)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyButtonActionPerformed
        // TODO add your handling code here:
        try {
            String name = addFacultyTextField.getText().trim();
            if (name.isEmpty()) {
                addFacultyStatusLabel.setText("Invalid name");
            } 
            else {
                // Add the faculty to the faculty table.
                int status = Faculty.addFaculty(name);
                if (status > 0) {
                    addFacultyStatusLabel.setText(name + " has been added to the Faculty table");
                } 
                else {
                    addFacultyStatusLabel.setText(name + " is already in Faculty table.");
                }

                // rebuild faculty combo boxes.
                rebuildFacultyComboBoxes();
            }
        } 
        catch (Exception e) {
            addFacultyStatusLabel.setText("Error adding faculty");
        }
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveButtonActionPerformed
        // TODO add your handling code here:
        try {
            boolean isRoomAvailable = false;
            //get input data
            int inputSeats = Integer.parseInt(reserveSeatsTextField.getText());
            Date inputDate = Date.valueOf(reserveDateComboBox.getSelectedItem().toString());
            String inputName = reserveFacultyComboBox.getSelectedItem().toString();

            //get list of rooms with enough capacity
            ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(inputSeats);
            //find the first available room
            for (String room : possibleRooms) {
                isRoomAvailable = ReservationQueries.checkRoomReservationByDate(room, inputDate);
                if (isRoomAvailable) {
                    //add reservation
                    ReservationEntry entry = new ReservationEntry(inputName, room, inputDate, inputSeats);
                    ReservationQueries.addReservationEntry(entry);
                    reserveStatusLabel.setText(String.format("Faculty %s has reserved room %s for %s", inputName, room, inputDate.toString()));
                    break;
                }
            }
            //no rooms available, create a waitlist entry
            if (!isRoomAvailable) {
                WaitlistEntry entry = new WaitlistEntry(inputName, inputDate, inputSeats);
                int status = WaitlistQueries.addWaitlistEntry(entry);
                if(status == 0){
                    reserveStatusLabel.setText(String.format("Reservation for %s was already requested and waitlisted on this date", inputName));
                }
                else{
                    reserveStatusLabel.setText(String.format("Reservation for %s on %s was waitlisted", inputName, inputDate.toString()));
                }
            }
        } 
        catch (Exception e) {
            reserveStatusLabel.setText("Number of seats must be an integer.");
        }
    }//GEN-LAST:event_reserveButtonActionPerformed

    private void statusReservationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusReservationsButtonActionPerformed
        // TODO add your handling code here:
        try {
            Date inputDate = Date.valueOf(statusReservationsDateComboBox.getSelectedItem().toString());
            //Get a list of all reservations on given date
            ArrayList<ReservationEntry> reservations = ReservationQueries.getReservationsByDate(inputDate);
            if (reservations.isEmpty()) {
                statusReservationsStatusTextArea.setText("No reservations for selected date");
            } 
            else {
                statusReservationsStatusTextArea.setText("");
                for (ReservationEntry entry : reservations) {
                    statusReservationsStatusTextArea.append(String.format("%s reserved room %s\n", entry.getFaculty(), entry.getRoom()));
                }
            }
        } 
        catch (Exception e) {
            statusReservationsStatusTextArea.setText("There was an error generating your report");
        }
    }//GEN-LAST:event_statusReservationsButtonActionPerformed

    private void statusWaitlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusWaitlistButtonActionPerformed
        // TODO add your handling code here:
        try {
            //get a list of all waitlist entries 
            ArrayList<WaitlistEntry> entries = WaitlistQueries.getFullWaitlist();
            if (entries.isEmpty()) {
                statusWaitlistStatusTextArea.setText("Waitlist is empty");
            } 
            else {
                statusWaitlistStatusTextArea.setText("");
                for (WaitlistEntry entry : entries) {
                    statusWaitlistStatusTextArea.append(String.format("Faculty %s requested %d seats for %s\n", entry.getFaculty(), entry.getSeats(), entry.getDate().toString()));
                }
            }
        } 
        catch (Exception e) {
            statusWaitlistStatusTextArea.setText("There was an error generating your report");
        }
    }//GEN-LAST:event_statusWaitlistButtonActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // TODO add your handling code here:
        try {
            SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
            String spinnerValue = formater.format(addDateSpinner.getValue());
            Date inputDate = Date.valueOf(spinnerValue);
            
            // Add the date to the date table.
            int status = Dates.addDate(inputDate);
            if (status > 0) {
                addDateStatusLabel.setText(inputDate.toString() + " has been added to the Date table.");
            } 
            else {
                addDateStatusLabel.setText(inputDate.toString() + " is already in Date table.");
            }
            // rebuild faculty combo boxes.
            rebuildDateComboBoxes();
        }
        catch (Exception e) {
            addDateStatusLabel.setText("Error adding Date");
        }
    }//GEN-LAST:event_addDateButtonActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // TODO add your handling code here:
        int inputSeats = 0;
        String inputRoom = addRoomNameTextField.getText().trim();
        if (inputRoom.isEmpty()) {
            addRoomStatusTextArea.setText("Room name must be provided");
        } 
        else {
            try {
                inputSeats = Integer.parseInt(addRoomSeatsTextField.getText().trim());
                //add room to database
                RoomEntry roomEntry = new RoomEntry(inputRoom, inputSeats);
                int status = RoomQueries.addRoom(roomEntry);
                if (status > 0) {
                    // New room has been added. Try to make reservations out of waitlist
                   addRoomStatusTextArea.setText(roomEntry.getName() + " has been added to the Room table.\n");
                    boolean isRoomAvailable = false;
                     //get a list of all waitlist entries ordered by timestamp
                    ArrayList<WaitlistEntry> entries = WaitlistQueries.getWaitlistByTimestamp();
                    // try to move entries from waitlist to reservations
                    for (WaitlistEntry entry : entries) {
                        if(entry.getSeats() <= inputSeats){
                            isRoomAvailable = ReservationQueries.checkRoomReservationByDate(inputRoom, entry.getDate());
                            if(isRoomAvailable) {
                                //add reservation
                                ReservationEntry reservationEntry = new ReservationEntry(entry.getFaculty(), inputRoom, entry.getDate(), entry.getSeats());  
                                ReservationQueries.addReservationEntry(reservationEntry);
                                //remove entry from waitlist
                                WaitlistQueries.deleteWaitlistEntry(entry);
                                addRoomStatusTextArea.append(String.format("Faculty %s has reserved room %s for %s\n", reservationEntry.getFaculty(), inputRoom, reservationEntry.getDate().toString()));
                            }
                        }
                    }
                    //rebuild the combo box
                    rebuildRoomComboBoxes();
                } 
                else {
                    addRoomStatusTextArea.setText(roomEntry.getName() + " is already in Room table.");
                }
            }
            catch (NumberFormatException e) {
                addRoomStatusTextArea.setText("Number of seats must be an integer");
            }
            catch (Exception e) {
                addRoomStatusTextArea.setText("Error adding room");
            }
        }
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void cancelReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReservationButtonActionPerformed
        // TODO add your handling code here:
        try{
            String inputName = cancelReservationFacultyComboBox.getSelectedItem().toString();
            Date inputDate = Date.valueOf(cancelReservationDateComboBox.getSelectedItem().toString());
            ArrayList<ReservationEntry> reservations = ReservationQueries.getReservationsByFacultyAndDate(inputName, inputDate);
            ArrayList<WaitlistEntry> waitlist = WaitlistQueries.getWaitlistByFacultyAndDate(inputName, inputDate);
            if(reservations.isEmpty() && waitlist.isEmpty()){
                cancelReservationStatusTextArea.setText("This faculty member has no reservations on the selected day");
                return;
            }
            //cancel reservations found
            for (ReservationEntry entry : reservations) {
                ReservationQueries.deleteReservation(entry);
                cancelReservationStatusTextArea.setText(String.format("Reservation for %s on %s was cancelled\n", inputName, inputDate.toString()));
            }
            //cancel waitlisted reservations
            for (WaitlistEntry entry : waitlist) {
                WaitlistQueries.deleteWaitlistEntry(entry);
                cancelReservationStatusTextArea.setText(String.format("Reservation for %s on %s was removed from the waitlist\n", inputName, inputDate.toString()));
            }
            //check if there are waitlisted reservations that can be assigned now
            ArrayList<WaitlistEntry> entries = WaitlistQueries.getWaitlistByTimestamp();
            boolean isRoomAvailable = false;
            for (WaitlistEntry entry : entries){
                ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(entry.getSeats());
                //find the first available room
                for (String room : possibleRooms) {
                    isRoomAvailable = ReservationQueries.checkRoomReservationByDate(room, entry.getDate());
                    if (isRoomAvailable) {
                        //add reservation
                        ReservationEntry reservationEntry = new ReservationEntry(entry.getFaculty(), room, entry.getDate(), entry.getSeats());
                        ReservationQueries.addReservationEntry(reservationEntry);
                        WaitlistQueries.deleteWaitlistEntry(entry);
                        cancelReservationStatusTextArea.append(String.format("Faculty %s has reserved room %s for %s\n", reservationEntry.getFaculty(), room, inputDate.toString()));
                        break;
                    }
                }
            }
        }
        catch(Exception e){
            cancelReservationStatusTextArea.setText("Error cancelling reservation");
        }
    }//GEN-LAST:event_cancelReservationButtonActionPerformed

    private void statusFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusFacultyButtonActionPerformed
        // TODO add your handling code here:
        try {
            String inputName = statusFacultyComboBox.getSelectedItem().toString();
            //Get a list of all reservations for given faculty
            ArrayList<ReservationEntry> reservations = ReservationQueries.getReservationsByFaculty(inputName);
            ArrayList<WaitlistEntry> waitlist = WaitlistQueries.getWaitlistByFaculty(inputName);
            if (reservations.isEmpty() && waitlist.isEmpty()) {
                statusFacultyStatusTextArea.setText("No reservations for selected faculty member");
            } 
            else {
                statusFacultyStatusTextArea.setText("");
                for (ReservationEntry entry : reservations) {
                    statusFacultyStatusTextArea.append(String.format("Room %s reserved for %s\n", entry.getRoom(), entry.getDate().toString()));
                }
                for (WaitlistEntry entry : waitlist) {
                    statusFacultyStatusTextArea.append(String.format("Waiting for room with %d seats for %s\n", entry.getSeats(), entry.getDate().toString()));
                }
            }
        } 
        catch (Exception e) {
            statusReservationsStatusTextArea.setText("There was an error generating your report");
        }
    }//GEN-LAST:event_statusFacultyButtonActionPerformed

    private void dropRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomButtonActionPerformed
        // TODO add your handling code here:
        try{
            String inputRoom = dropRoomComboBox.getSelectedItem().toString();
            RoomQueries.deleteRoom(inputRoom);
            dropRoomStatusTextArea.setText(String.format("Room %s has been removed\n", inputRoom));
            //get all reservations made for the room
            ArrayList<ReservationEntry> reservations = ReservationQueries.getReservationsByRoom(inputRoom);
            boolean isRoomAvailable = false;
            for(ReservationEntry entry : reservations){
                //try to make a new reservation
                //get list of rooms with enough capacity
                ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(entry.getSeats());
                //find the first available room
                for (String room : possibleRooms) {
                    isRoomAvailable = ReservationQueries.checkRoomReservationByDate(room, entry.getDate());
                    if (isRoomAvailable) {
                        //add reservation
                        ReservationEntry newReservation = new ReservationEntry(entry.getFaculty(), room, entry.getDate(), entry.getSeats());
                        ReservationQueries.addReservationEntry(newReservation);
                        dropRoomStatusTextArea.append(String.format("Reservation for faculty %s has been moved to room %s for %s\n", newReservation.getFaculty(), room, newReservation.getDate().toString()));
                        break;
                    }
                }
                //if a reservation cannot be made, then put it in the waitlist
                if (!isRoomAvailable) {
                    //make sure that the timestamp is the same when the reservation was first made
                    WaitlistEntry waitlistEntry = new WaitlistEntry(entry.getFaculty(), entry.getDate(), entry.getSeats(), entry.getTimestamp());
                    int status = WaitlistQueries.addWaitlistEntry(waitlistEntry);
                    if(status > 0){
                       dropRoomStatusTextArea.append(String.format("Resevation for %s on %s was waitlisted\n", waitlistEntry.getFaculty(), waitlistEntry.getDate().toString())); 
                    }
                }
                ReservationQueries.deleteReservation(entry);
            }
            rebuildRoomComboBoxes();
        }
        catch(Exception e){
            dropRoomStatusTextArea.setText("There was an error dropping the room");
        }
    }//GEN-LAST:event_dropRoomButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDateButton;
    private javax.swing.JSpinner addDateSpinner;
    private javax.swing.JLabel addDateStatusLabel;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JLabel addFacultyStatusLabel;
    private javax.swing.JTextField addFacultyTextField;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JTextField addRoomNameTextField;
    private javax.swing.JTextField addRoomSeatsTextField;
    private javax.swing.JTextArea addRoomStatusTextArea;
    private javax.swing.JButton cancelReservationButton;
    private javax.swing.JComboBox<String> cancelReservationDateComboBox;
    private javax.swing.JComboBox<String> cancelReservationFacultyComboBox;
    private javax.swing.JTextArea cancelReservationStatusTextArea;
    private javax.swing.JButton dropRoomButton;
    private javax.swing.JComboBox<String> dropRoomComboBox;
    private javax.swing.JTextArea dropRoomStatusTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton reserveButton;
    private javax.swing.JComboBox<String> reserveDateComboBox;
    private javax.swing.JComboBox<String> reserveFacultyComboBox;
    private javax.swing.JTextField reserveSeatsTextField;
    private javax.swing.JLabel reserveStatusLabel;
    private javax.swing.JButton statusFacultyButton;
    private javax.swing.JComboBox<String> statusFacultyComboBox;
    private javax.swing.JTextArea statusFacultyStatusTextArea;
    private javax.swing.JButton statusReservationsButton;
    private javax.swing.JComboBox<String> statusReservationsDateComboBox;
    private javax.swing.JTextArea statusReservationsStatusTextArea;
    private javax.swing.JButton statusWaitlistButton;
    private javax.swing.JTextArea statusWaitlistStatusTextArea;
    // End of variables declaration//GEN-END:variables
}
